"""Validate VASP KPOINTS files or the KSPACING/KGAMMA INCAR settings."""

from __future__ import annotations
from pydantic import Field
from typing import TYPE_CHECKING
import numpy as np

from pymatgen.io.validation.common import SETTINGS, BaseValidator

if TYPE_CHECKING:
    from pymatgen.core import Structure
    from pymatgen.io.validation.common import VaspFiles


def get_kpoint_divisions_from_kspacing(structure: Structure, kspacing: float) -> tuple[int, int, int]:
    """
    Determine the number of k-points generated by VASP when KSPACING is set.

    See https://www.vasp.at/wiki/index.php/KSPACING for a discussion.
    The 2 pi factor on that page appears to be irrelevant.

    Parameters
    -----------
    structure : Structure
    kspacing : float

    Returns
    -----------
    tuple of int, int, int
        The number of k-point divisions along each axis.
    """
    return tuple([max(1, int(np.ceil(structure.lattice.reciprocal_lattice.abc[ik] / kspacing))) for ik in range(3)])  # type: ignore[return-value]


class CheckKpointsKspacing(BaseValidator):
    """Check that k-point density is sufficiently high and is compatible with lattice symmetry."""

    name: str = "Check k-point density"
    kpts_tolerance: float = Field(
        SETTINGS.VASP_KPTS_TOLERANCE,
        description="Tolerance for evaluating k-point density, to accommodate different the k-point generation schemes across VASP versions.",
    )
    allow_explicit_kpoint_mesh: bool | str | None = Field(
        SETTINGS.VASP_ALLOW_EXPLICIT_KPT_MESH,
        description="Whether to permit explicit generation of k-points (as for a bandstructure calculation).",
    )
    allow_kpoint_shifts: bool = Field(
        SETTINGS.VASP_ALLOW_KPT_SHIFT,
        description="Whether to permit shifting the origin of the k-point mesh from Gamma.",
    )

    def _get_valid_num_kpts(
        self,
        vasp_files: VaspFiles,
    ) -> int:
        """
        Get the minimum permitted number of k-points for a structure according to an input set.

        Returns
        -----------
        int, the minimum permitted number of k-points, consistent with self.kpts_tolerance
        """
        # If MP input set specifies KSPACING in the INCAR
        if (kspacing := vasp_files.valid_input_set.incar.get("KSPACING")) and (
            vasp_files.valid_input_set.kpoints is None
        ):
            valid_kspacing = kspacing
            # number of kpoints along each of the three lattice vectors
            valid_num_kpts = np.prod(
                get_kpoint_divisions_from_kspacing(vasp_files.user_input.structure, valid_kspacing), dtype=int
            )
        # If MP input set specifies a KPOINTS file
        elif vasp_files.valid_input_set.kpoints:
            valid_num_kpts = vasp_files.valid_input_set.kpoints.num_kpts or np.prod(
                vasp_files.valid_input_set.kpoints.kpts[0], dtype=int
            )

        return int(np.floor(int(valid_num_kpts) * self.kpts_tolerance))

    def _check_user_shifted_mesh(self, vasp_files: VaspFiles, reasons: list[str], warnings: list[str]) -> None:
        # Check for user shifts
        if (
            (not self.allow_kpoint_shifts)
            and vasp_files.actual_kpoints
            and any(shift_val != 0 for shift_val in vasp_files.actual_kpoints.kpts_shift)
        ):  # type: ignore[union-attr]
            reasons.append("INPUT SETTINGS --> KPOINTS: shifting the kpoint mesh is not currently allowed.")

    def _check_explicit_mesh_permitted(self, vasp_files: VaspFiles, reasons: list[str], warnings: list[str]) -> None:
        # Check for explicit kpoint meshes

        if not vasp_files.actual_kpoints:
            return

        if isinstance(self.allow_explicit_kpoint_mesh, bool):
            allow_explicit = self.allow_explicit_kpoint_mesh
        elif self.allow_explicit_kpoint_mesh == "auto":
            allow_explicit = vasp_files.run_type == "nonscf"
        else:
            allow_explicit = False

        if (not allow_explicit) and len(vasp_files.actual_kpoints.kpts) > 1:  # type: ignore[union-attr]
            reasons.append(
                "INPUT SETTINGS --> KPOINTS: explicitly defining "
                "the k-point mesh is not currently allowed. "
                "Automatic k-point generation is required."
            )

    def _check_kpoint_density(self, vasp_files: VaspFiles, reasons: list[str], warnings: list[str]) -> None:
        """
        Check that k-point density is sufficiently high and is compatible with lattice symmetry.
        """

        # Check number of kpoints used
        # Checks should work regardless of whether vasprun was supplied.
        valid_num_kpts = self._get_valid_num_kpts(vasp_files)
        if vasp_files.actual_kpoints:
            if vasp_files.actual_kpoints.num_kpts <= 0:
                cur_num_kpts = np.prod(vasp_files.actual_kpoints.kpts, dtype=int)
            else:
                cur_num_kpts = vasp_files.actual_kpoints.num_kpts
        else:
            cur_num_kpts = np.prod(
                get_kpoint_divisions_from_kspacing(
                    vasp_files.user_input.structure,
                    vasp_files.user_input.incar.get("KSPACING", self.vasp_defaults["KSPACING"].value),
                ),
                dtype=int,
            )

        if cur_num_kpts < valid_num_kpts:
            reasons.append(
                f"INPUT SETTINGS --> KPOINTS or KSPACING: {cur_num_kpts} kpoints were "
                f"used, but it should have been at least {valid_num_kpts}."
            )

    def _check_kpoint_mesh_symmetry(self, vasp_files: VaspFiles, reasons: list[str], warnings: list[str]) -> None:
        # check for valid kpoint mesh (which depends on symmetry of the structure)

        if vasp_files.actual_kpoints:
            cur_kpoint_style = vasp_files.actual_kpoints.style.name.lower()  # type: ignore[union-attr]
        else:
            cur_kpoint_style = (
                "gamma"
                if vasp_files.user_input.incar.get("KGAMMA", self.vasp_defaults["KGAMMA"].value)
                else "monkhorst"
            )

        is_hexagonal = vasp_files.user_input.structure.lattice.is_hexagonal()
        is_face_centered = vasp_files.user_input.structure.get_space_group_info()[0][0] == "F"
        monkhorst_mesh_is_invalid = is_hexagonal or is_face_centered
        if (
            cur_kpoint_style == "monkhorst"
            and monkhorst_mesh_is_invalid
            and any(x % 2 == 0 for x in vasp_files.actual_kpoints.kpts[0])  # type: ignore[union-attr]
        ):
            # only allow Monkhorst with all odd number of subdivisions per axis.
            kv = vasp_files.actual_kpoints.kpts[0]  # type: ignore[union-attr]
            reasons.append(
                f"INPUT SETTINGS --> KPOINTS or KGAMMA: ({'Ã—'.join([f'{_k}' for _k in kv])}) "
                "Monkhorst-Pack kpoint mesh was used."
                "To be compatible with the symmetry of the lattice, "
                "a Monkhorst-Pack mesh should have only odd number of "
                "subdivisions per axis."
            )
